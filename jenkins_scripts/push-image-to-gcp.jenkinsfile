pipeline {
  agent any
  environment {
    WORKSPACE_NAME='data-masters-workspace'
    RESOURCE_GROUP='DataMasters'    
    REGION='us-central1'
    PROJECT_ID='mlopscase'
    REPOSITORY='mlopscase'
  }
  stages {
    stage('Tag Image with. ') {
      steps {
        script {
          sh '''
            git clone $GIT_PROJECT 
            export PROJECT_DIR=$(echo $GIT_PROJECT | awk -F/ '{print $NF}'| sed 's/.git//g')
            cd $PROJECT_DIR
            export MODEL_VERSION=$(cat API/app/model_version.py | cut -d= -f2)
            GIT_TAG=$(git tag --sort=-v:refname --list "v[0-9]*" | head -n 1)
            echo "$PROJECT_DIR:$MODEL_VERSION$GIT_TAG" > ${WORKSPACE}/image.txt
          '''
        }
      }
    }    
    stage('Push image to Google Cloud Artifactory. ') {
      environment {
        WORKSPACE_NAME='data-masters-workspace'
        RESOURCE_GROUP='DataMasters'    
        REGION='us-central1'
        PROJECT_ID='mlopscase'
        REPOSITORY='mlopscase'
      }
      steps {
        echo 'Connect to GCP'
        script {
          withCredentials([file(credentialsId: 'GCLOUD_KEY_JSON', variable: 'GCLOUD_KEY_JSON')]) {
            sh '''
              GCLOUD_LOGIN_INFO=mlops-service-account@mlopscase.iam.gserviceaccount.com
              GCLOUD_PROJECT=mlopscase
              gcloud auth activate-service-account $GCLOUD_LOGIN_INFO \
              --key-file=$GCLOUD_KEY_JSON --project=$GCLOUD_PROJECT
              export GOOGLE_APPLICATION_CREDENTIALS=$GCLOUD_KEY_JSON
              ####
            '''
          }
        }
        echo "Push image to Google Cloud Artifact Repository."
        script {
          sh '''
            create_set_google_artifactory_repo () {
              if ( ! gcloud artifacts repositories  list | grep "$REPOSITORY" )  ; then  
                echo "Repositório não existe. Abortando."
                exit 1
              fi
              echo "Configurando repositório para push"
              sudo gcloud auth configure-docker $REGION-docker.pkg.dev --quiet
            }
            create_set_google_artifactory_repo

            #Clone MLOPS project
            IMAGE=`cat  ${WORKSPACE}/image.txt`
            CONTAINER_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE"
            echo "tageando imagem."
            sudo docker tag $IMAGE $CONTAINER_IMAGE
            echo "Build step: Publicando a imagem no Google Artifact Registry."  
            sudo docker push $CONTAINER_IMAGE
          '''
        }
      }
    }
  }
  post {
    // Clean after build
    always {
        sh "sudo chmod -R 777 ."
        cleanWs(cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true)
    }
  }
}