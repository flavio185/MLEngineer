pipeline {
  agent any
  environment {
    AZURE_SUBSCRIPTION_ID='0888be57-ee47-4ba5-be90-b464e3daebf6'
    AZURE_TENANT_ID='51fb973d-85c3-4d97-9707-645e645454a4'
    AZURE_STORAGE_ACCOUNT='datamasterswor0684902568'
    WORKSPACE_NAME='data-masters-workspace'
    RESOURCE_GROUP='DataMasters'    
  }
  stages {
    stage('Clone Project. Start Docker image. Train model. Log model to azure ml. ') {
      steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'azuresp', 
                          passwordVariable: 'AZURE_CLIENT_SECRET', 
                          usernameVariable: 'AZURE_CLIENT_ID')]) {
        sh '''
            #Clone project
            git clone $GIT_PROJECT
            export PROJECT_DIR=$(echo $GIT_PROJECT | awk -F/ '{print $NF}'| sed 's/.git//g')
            #Download model artifacts.
            git clone https://github.com/flavio185/MLEngineer.git
            sudo docker run \
                -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                -e RESOURCE_GROUP=$RESOURCE_GROUP \
                -e WORKSPACE_NAME=$WORKSPACE_NAME \
                -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID \
                -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                -e AZURE_STORAGE_ACCOUNT=$AZURE_STORAGE_ACCOUNT \
                -v $PWD/MLEngineer/jenkins_scripts/azure-experiment:/azure-experiment \
                python-az \
                /bin/bash -c "cd /azure-experiment && \
                python downloadModel.py model_name=$PROJECT_DIR version=$MODEL_VERSION
                "
            sudo mv MLEngineer/jenkins_scripts/azure-experiment/output $PROJECT_DIR/API/app 
            sudo rm -rf MLEngineer
        '''
        sh '''
            export PROJECT_DIR=$(echo $GIT_PROJECT | awk -F/ '{print $NF}'| sed 's/.git//g')
            cd $PROJECT_DIR/API
            export GITHUB_SHA=$(git rev-parse HEAD)
            sudo docker build --no-cache --tag "$PROJECT_DIR:$GITHUB_SHA" .

        '''
        sh '''
            echo "Clean stopped containers"
            sudo docker container prune -f
        '''
            }
        }
      }
      post {
        // Clean after build
        always {
            sh "sudo chmod -R 777 ."
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
        }
      }
    }
  }
}
