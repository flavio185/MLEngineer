pipeline {
  agent any
  environment {
    AZURE_SUBSCRIPTION_ID='0888be57-ee47-4ba5-be90-b464e3daebf6'
    AZURE_TENANT_ID='51fb973d-85c3-4d97-9707-645e645454a4'
    AZURE_STORAGE_ACCOUNT='datamasterswor0684902568'
    WORKSPACE_NAME='data-masters-workspace'
    RESOURCE_GROUP='DataMasters'    
  }
  stages {
    stage('Download ML artifacts from Azure. ') {
      steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'azuresp', 
                          passwordVariable: 'AZURE_CLIENT_SECRET', 
                          usernameVariable: 'AZURE_CLIENT_ID')]) {
        sh '''
            #Clone project
            git clone $GIT_PROJECT
            export PROJECT_DIR=$(echo $GIT_PROJECT | awk -F/ '{print $NF}'| sed 's/.git//g')
            export MODEL_VERSION=$(cat $GIT_PROJECT/API/app/model_version.py | cut -d= -f2)
            #Download model artifacts.
            git clone https://github.com/flavio185/MLEngineer.git
            sudo docker run \
                -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
                -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
                -e RESOURCE_GROUP=$RESOURCE_GROUP \
                -e WORKSPACE_NAME=$WORKSPACE_NAME \
                -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID \
                -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
                -e AZURE_STORAGE_ACCOUNT=$AZURE_STORAGE_ACCOUNT \
                -v $PWD/MLEngineer/jenkins_scripts/azure-experiment:/azure-experiment \
                python-az \
                /bin/bash -c "cd /azure-experiment && \
                python downloadModel.py model_name=$PROJECT_DIR version=$MODEL_VERSION
                "
            sudo mv MLEngineer/jenkins_scripts/azure-experiment/output $PROJECT_DIR/API/app 
            sudo rm -rf MLEngineer
        '''
            }
        }
      }
    }
    stage('Build Image with ML artifacts. ') {
      steps {
        script {
          sh '''
            export PROJECT_DIR=$(echo $GIT_PROJECT | awk -F/ '{print $NF}'| sed 's/.git//g')
            export MODEL_VERSION=$(cat $PROJECT_DIR/API/app/model_version.py | cut -d= -f2)
            cd $PROJECT_DIR/API
            export GITHUB_SHA=$(git rev-parse HEAD)
            sudo docker build --no-cache --tag "$PROJECT_DIR:$MODEL_VERSION$GITHUB_SHA" .
            sleep 10
            echo "Clean stopped containers"
            sudo docker container prune -f
            echo "$PROJECT_DIR:$MODEL_VERSION$GITHUB_SHA" > ${WORKSPACE}/image.txt
          '''
        }
      }
    }
    stage('Push image to Google Cloud Artifactory. ') {
      when { 
        environment name: 'PUSH_TO_ARTIFACTORY', value: 'yes' 
      }
      environment {
        WORKSPACE_NAME='data-masters-workspace'
        RESOURCE_GROUP='DataMasters'    
        REGION='us-central1'
        PROJECT_ID='mlopscase'
        REPOSITORY='mlopscase'
      }
      steps {
        echo 'Connect to GCP'
        script {
          withCredentials([file(credentialsId: 'GCLOUD_KEY_JSON', variable: 'GCLOUD_KEY_JSON')]) {
            sh '''
              GCLOUD_LOGIN_INFO=mlops-service-account@mlopscase.iam.gserviceaccount.com
              GCLOUD_PROJECT=mlopscase
              gcloud auth activate-service-account $GCLOUD_LOGIN_INFO \
              --key-file=$GCLOUD_KEY_JSON --project=$GCLOUD_PROJECT
              export GOOGLE_APPLICATION_CREDENTIALS=$GCLOUD_KEY_JSON
              ####
            '''
          }
        }
        echo "Push image to Google Cloud Artifact Repository."
        script {
          sh '''
            create_set_google_artifactory_repo () {
              if ( ! gcloud artifacts repositories  list | grep "$REPOSITORY" )  ; then  
                echo "Repositório não existe. Abortando."
                exit 1
              fi
              echo "Configurando repositório para push"
              sudo gcloud auth configure-docker $REGION-docker.pkg.dev --quiet
            }
            create_set_google_artifactory_repo

            #Clone MLOPS project
            IMAGE=`cat  ${WORKSPACE}/image.txt`
            CONTAINER_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE"
            echo "tageando imagem."
            sudo docker tag $IMAGE $CONTAINER_IMAGE
            echo "Build step: Publicando a imagem no Google Artifact Registry."  
            sudo docker push $CONTAINER_IMAGE
          '''
        }
      }
    }
  }
  post {
    // Clean after build
    always {
        sh "sudo chmod -R 777 ."
        cleanWs(cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true)
    }
  }
}
