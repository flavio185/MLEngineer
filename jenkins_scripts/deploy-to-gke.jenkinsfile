pipeline {
  agent any
  environment {
    WORKSPACE_NAME='data-masters-workspace'
    RESOURCE_GROUP='DataMasters'    
    REGION='us-central1'
    PROJECT_ID='mlopscase'
    REPOSITORY='mlopscase'
  }
  stages {
    stage('Connect to GCP ') {
      steps {
        script {
          withCredentials([file(credentialsId: 'GCLOUD_KEY_JSON', variable: 'GCLOUD_KEY_JSON')]) {
            sh '''
              #####
              GCLOUD_LOGIN_INFO=mlops-service-account@mlopscase.iam.gserviceaccount.com
              GCLOUD_PROJECT=mlopscase
              #cp $GCLOUD_KEY_JSON MLEngineer/GKE/Terraform/key.json
              gcloud auth activate-service-account $GCLOUD_LOGIN_INFO \
              --key-file=$GCLOUD_KEY_JSON --project=$GCLOUD_PROJECT
              export GOOGLE_APPLICATION_CREDENTIALS=$GCLOUD_KEY_JSON
              ####
            '''
          }
        }
      }
    }
    stage('Push image to Google Cloud Artifact Repository.') {
      steps {
        script {
          withCredentials([file(credentialsId: 'GCLOUD_KEY_JSON', variable: 'GCLOUD_KEY_JSON')]) {
            sh '''
              create_set_google_artifactory_repo () {
                if ( ! gcloud artifacts repositories  list | grep "$REPOSITORY" )  ; then  
                  echo "Repositório não existe. Abortando."
                  exit 1
                fi
                echo "Configurando repositório para push"
                sudo gcloud auth configure-docker $REGION-docker.pkg.dev --quiet
              }
              create_set_google_artifactory_repo

              git clone $GIT_PROJECT
              PROJECT_DIR="$(echo $GIT_PROJECT | awk -F/ '{print $NF}'| sed 's/.git//g')"
              APP=$PROJECT_DIR             
              MODEL_VERSION=$(cat $PROJECT_DIR/API/app/model_version.py | cut -d= -f2)
              cd $PROJECT_DIR
              GITHUB_SHA=$(git rev-parse HEAD)
              IMAGE="$PROJECT_DIR:$MODEL_VERSION$GITHUB_SHA"
              CONTAINER_IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE"

              configure_kubectl (){
                echo "Build step: Configurando kubectl para o projeto."  
                CLUSTER_NAME=mlopscase-gke
                #
                gcloud container clusters \
                get-credentials $CLUSTER_NAME \
                --region $REGION
              }
              configure_kubectl

              installUpgradeHelm(){
                #Clone MLOPS project
                cd ${WORKSPACE}
                git clone https://github.com/flavio185/MLEngineer.git
                helm upgrade --install $APP ./MLEngineer/GKE/Helm/chart-mlopscase --set=image.tag=$CONTAINER_IMAGE -f ./ml-salary-predict/manifest/Helm/values.yaml
                #
              }
              installUpgradeHelm
            '''
          }
        }
      }
    }
  }
  post {
    // Clean after build
    always {
        sh "sudo chmod -R 777 ."
        cleanWs(cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true)
    }
  }
}